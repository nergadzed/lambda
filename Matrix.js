"use strict";
const Equality = (target) => (value) => Object.is(value, target);
class Matrix {
    y;
    x;
    static traversal = {
        abscissa: (_, [y, x], [_Y, X]) => X > x + 1 ? [y, ++x] : [++y, 0],
        ordinate: (_, [y, x], [Y, _X]) => Y > y + 1 ? [++y, x] : [0, ++x],
        overflow: (behavior, [Y, X]) => {
            function handle(value, limit) {
                if (value >= limit || value < 0)
                    switch (behavior) {
                        case 'constrain': return value < 0 ? 0 : limit - 1;
                        case 'continue': return value;
                        case 'cycle': return Math.abs(value % limit);
                        case 'throw': throw new RangeError;
                        default: throw new TypeError;
                    }
                else
                    return value;
            }
            return ([y, x]) => [handle(y, Y), handle(x, X)];
        }
    };
    static validation = {
        isFunc: (target) => typeof target === 'function',
        isSelf: (target) => target instanceof Matrix,
        isDeep: (target) => Array.isArray(target) && target.every(member => Array.isArray(member)),
        isFlat: (target) => Array.isArray(target),
        isIter: (target) => target instanceof Iterator,
    };
    static #coalesce(...sources) {
        return (...[y, x]) => {
            for (const [index, source] of sources.entries()) {
                const entry = (sources[index] = Matrix.#factory(source))(y, x);
                if (entry != null)
                    return entry;
                else
                    continue;
            }
            return null;
        };
    }
    static #factory(source) {
        switch (true) {
            case Matrix.validation.isFunc(source):
                return source;
            case Matrix.validation.isSelf(source):
                return (y, x) => source.state[y]?.[x];
            case Matrix.validation.isDeep(source):
                return (y, x) => source[y]?.[x];
            case Matrix.validation.isFlat(source):
                return (source => (y, x) => source.next([y, x]).value)(source.values());
            case Matrix.validation.isIter(source):
                return (y, x) => source.next([y, x]).value;
            default: throw new TypeError;
        }
    }
    static apply(target, transform) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => (entry => transform(entry, [y, x]))(factory(y, x)));
    }
    static coalesce(target, ...matrices) {
        return new Matrix(target.y, target.x, ...matrices);
    }
    static deflate(target, discard, predicate = Equality(discard)) {
        const factory = Matrix.#factory(target);
        let [Y, X] = [0, 0];
        const [Ys, Xs] = [
            target.state.map((row, y) => row.every((entry, x) => predicate(entry, [y, x])) ? Y++ : y),
            target.transposed.map((col, x) => col.every((entry, y) => predicate(entry, [y, x])) ? X++ : x),
        ];
        return new Matrix(target.y - Y, target.x - X, (y, x) => factory(Ys[y], Xs[x]));
    }
    static extract(target, entry, predicate = Equality(entry)) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => (entry => predicate(entry, [y, x]) ? entry : null)(factory(y, x)));
    }
    static fill(target, ...sources) {
        return new Matrix(target.y, target.x, target.rows, ...sources);
    }
    static reflect(target, yAxis, xAxis) {
        // return new Matrix<S>( target.y, target.x, ( yAxis ? target.rows.reverse() : target.rows ).map( row => xAxis ? row.reverse() : row ) )
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => factory(yAxis ? target.y - 1 - y : y, xAxis ? target.x - 1 - x : x));
    }
    static frame(target, [yStart, xStart], [yEnd, xEnd]) {
        const factory = Matrix.#factory(target.rows);
        return new Matrix(...[yEnd - yStart, xEnd - xStart], (y, x) => factory(yStart + y, xStart + x));
    }
    static inflate(target, ...sources) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y * 2 - 1, target.x * 2 - 1, (y, x) => factory(y % 2 ? -1 : y >> 1, x % 2 ? -1 : x >> 1), ...sources);
    }
    static omit(target, discard, predicate = Equality(discard)) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => (entry => predicate(entry, [y, x]) ? null : entry)(factory(y, x)));
    }
    static replace(target, discard, by, predicate = Equality(discard), transform = () => by) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => (entry => predicate(entry, [y, x]) ? transform(entry, [y, x]) : entry)(factory(y, x)));
    }
    static rotate(target, n) {
        switch ((n % 4 + 4) % 4) {
            case 1: return new Matrix(target.x, target.y, target.cols.map(row => row.reverse()));
            case 2: return new Matrix(target.y, target.x, target.rows.reverse().map(col => col.reverse()));
            case 3: return new Matrix(target.x, target.y, target.cols.reverse());
            case 0: return new Matrix(target.y, target.x, target.rows);
            default: throw new Error;
        }
    }
    static scale(target, [yBy, xBy], absolute = true, ...sources) {
        [yBy, xBy] = absolute ? [yBy, xBy] : [target.y + yBy, target.x + xBy];
        return new Matrix(yBy, xBy, ...sources);
    }
    static shift(target, [yBy, xBy], ...sources) {
        const factory = Matrix.#factory(target);
        return new Matrix(target.y, target.x, (y, x) => factory(y - yBy, x - xBy), ...sources);
    }
    static transpose(target) {
        return new Matrix(target.x, target.y, target.cols);
    }
    static traverse(target, traverse, shape, behavior = 'continue', initial = [0, 0]) {
        return new Matrix(...shape, target[Symbol.iterator](initial, shape[0] * shape[1], behavior, traverse).map(entry => entry[0]));
    }
    state;
    transposed;
    constructor(y, x, ...sources) {
        this.y = y;
        this.x = x;
        const factory = Matrix.#coalesce(...sources);
        this.state = Array.from(Array(y), (_, y_index) => Array.from(Array(x), (_, x_index) => factory(y_index, x_index)));
        this.transposed = Array.from(Array(x), (_, x_index) => Array.from(Array(y), (_, y_index) => this.state[y_index][x_index]));
    }
    get rows() {
        return this.state.map(identity => [...identity]);
    }
    row(index) {
        return this.state.at(index)?.map(identity => identity);
    }
    get cols() {
        return this.transposed.map(identity => [...identity]);
    }
    col(index) {
        return this.transposed.at(index)?.map(identity => identity);
    }
    *[Symbol.iterator](initial = [0, 0], limit = this.y * this.x - initial[0] * initial[1], behavior = 'cycle', traverse = Matrix.traversal.abscissa) {
        let [y, x] = initial, entry, overflow = Matrix.traversal.overflow(behavior, [this.y, this.x]);
        while (entry = this.state[y]?.[x], limit-- > 0)
            [y, x] = overflow((yield [entry, [y, x]]) ?? traverse(entry, [y, x], [this.y, this.x]));
    }
    *indexOf(entry, initial = [0, 0], predicate = Equality(entry)) {
        yield* this[Symbol.iterator](initial).filter(entry => predicate(...entry));
    }
    // * areaOf(
    //     entry      : Nullable<T>,
    //     initial    : Index        = [0, 0],
    //     predicate  : Predicate<T> = Equality( entry ),
    //     consistent : boolean      = false,
    // ): Generator<[ Index, Index ], void, void> {
    //     const indexes = [ ...this.indexOf( entry, initial, predicate ) ]
    // }
    *contiguous_greedy_dfs(initial, final, predicate = Equality(this.state[initial[0]][initial[1]]), DoF = [false, false, true, true]) {
        let location = this[Symbol.iterator](initial, Infinity, 'continue'), bias = ([yᷧ, xᷧ], [yᷨ, xᷨ]) => (final[0] - yᷧ + final[1] - xᷧ) -
            (final[0] - yᷨ + final[1] - xᷨ), [Y, X] = [this.y, this.x], movement = [...DoF[0] ? [[-1, 0]] : [],
            ...DoF[1] ? [[0, -1]] : [],
            ...DoF[2] ? [[1, 0]] : [],
            ...DoF[3] ? [[0, 1]] : [],], allowed = new Map(movement.map(key => [key, movement.filter(value => key[0] + value[0] !== 0 || key[1] + value[1] !== 0)]));
        function traversal(YX, [y, x]) {
            let result = location.next([y += YX[0], x += YX[1]]);
            if (-1 < y && y < Y && -1 < x && x < X)
                if (!result.done && predicate(result.value[0]))
                    if (y === final[0] && x === final[1])
                        return [[y, x]];
                    else
                        for (const move of allowed.get(YX).toSorted(bias)) {
                            let success = traversal(move, [y, x]);
                            if (success)
                                return [[y, x], ...success];
                            else
                                continue;
                        }
            return null;
        }
        for (const [DoF, _] of allowed)
            yield traversal(DoF, initial);
    }
}
let m0 = new Matrix(4, 4, (y, x) => `${y}x${x}`);
let m0gen = m0[Symbol.iterator]([0, 0], Infinity, 'continue');
debugger;
let m0contiguous = m0.contiguous_greedy_dfs([0, 0], [3, 3], (entry) => typeof entry === 'string');
console.log(m0contiguous.next());
console.log(m0contiguous.next());
console.log(m0contiguous.next());
console.log(m0contiguous.next());
//# sourceMappingURL=data:application/json;base64,