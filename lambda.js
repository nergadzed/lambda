import { createServer } from "node:http";
import { open } from "node:fs/promises";
const server = createServer((request, response) => {
    switch (request.url) {
        case "/":
            response.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
            // readFile("./lambda.html", { encoding: "utf-8" })
            //     .then(value => response.end(value), reason => { throw reason })
            open("lambda.html", "r")
                .then(value => value.createReadStream({ encoding: "utf-8" }).pipe(response));
            break;
        case "/app.mjs":
        case "/app.mts":
            response.writeHead(200, { "Content-Type": "text/javascript; charset=utf-8" });
            // readFile(`./${request.url}`, { encoding: "utf-8" })
            //     .then(value => response.end(value), reason => { throw reason })
            open(`.${request.url}`, "r")
                .then(value => value.createReadStream({ encoding: "utf-8" }).pipe(response));
            break;
        case "/lambda.css":
            response.writeHead(200, { "Content-Type": "text/css; charset=utf-8" });
            open(`.${request.url}`, "r")
                .then(value => value.createReadStream({ encoding: "utf-8" }).pipe(response));
            break;
        default:
            response.writeHead(404, { "Content-Type": "text/plain; charset=utf-8" });
            response.end("404: NOT FOUND");
    }
});
queueMicrotask(() => {
    console.log("Setting up a server...");
    server.listen(8000);
    console.log("Server is running on http://localhost:8000");
});
// debugger
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRXZDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRTtJQUM5QyxRQUFRLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQixLQUFLLEdBQUc7WUFDSixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQWMsRUFBRSwwQkFBMEIsRUFBRSxDQUFDLENBQUE7WUFDdkUsbURBQW1EO1lBQ25ELHNFQUFzRTtZQUN0RSxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQztpQkFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFFaEYsTUFBSztRQUNULEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssVUFBVTtZQUNYLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxFQUFFLGdDQUFnQyxFQUFFLENBQUMsQ0FBQTtZQUM3RSxzREFBc0Q7WUFDdEQsc0VBQXNFO1lBQ3RFLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUM7aUJBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQ2hGLE1BQUs7UUFDVCxLQUFLLGFBQWE7WUFDZCxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQWMsRUFBRSx5QkFBeUIsRUFBRSxDQUFDLENBQUE7WUFDdEUsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQztpQkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDaEYsTUFBSztRQUNUO1lBQ0ksUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxjQUFjLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFBO1lBQ3hFLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUE7QUFFRixjQUFjLENBQUMsR0FBRyxFQUFFO0lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQ0FBQTtBQUM3RCxDQUFDLENBQUMsQ0FBQTtBQUVGLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZXJ2ZXIgfSBmcm9tIFwibm9kZTpodHRwXCJcbmltcG9ydCB7IG9wZW4gfSBmcm9tIFwibm9kZTpmcy9wcm9taXNlc1wiXG5cbmNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcigocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcbiAgICBzd2l0Y2ggKHJlcXVlc3QudXJsKSB7XG4gICAgICAgIGNhc2UgXCIvXCI6XG4gICAgICAgICAgICByZXNwb25zZS53cml0ZUhlYWQoMjAwLCB7IFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XCIgfSlcbiAgICAgICAgICAgIC8vIHJlYWRGaWxlKFwiLi9sYW1iZGEuaHRtbFwiLCB7IGVuY29kaW5nOiBcInV0Zi04XCIgfSlcbiAgICAgICAgICAgIC8vICAgICAudGhlbih2YWx1ZSA9PiByZXNwb25zZS5lbmQodmFsdWUpLCByZWFzb24gPT4geyB0aHJvdyByZWFzb24gfSlcbiAgICAgICAgICAgIG9wZW4oXCJsYW1iZGEuaHRtbFwiLCBcInJcIilcbiAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB2YWx1ZS5jcmVhdGVSZWFkU3RyZWFtKHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KS5waXBlKHJlc3BvbnNlKSlcblxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcIi9hcHAubWpzXCI6XG4gICAgICAgIGNhc2UgXCIvYXBwLm10c1wiOlxuICAgICAgICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDIwMCwgeyBcIkNvbnRlbnQtVHlwZVwiOiBcInRleHQvamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOFwiIH0pXG4gICAgICAgICAgICAvLyByZWFkRmlsZShgLi8ke3JlcXVlc3QudXJsfWAsIHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KVxuICAgICAgICAgICAgLy8gICAgIC50aGVuKHZhbHVlID0+IHJlc3BvbnNlLmVuZCh2YWx1ZSksIHJlYXNvbiA9PiB7IHRocm93IHJlYXNvbiB9KVxuICAgICAgICAgICAgb3BlbihgLiR7cmVxdWVzdC51cmx9YCwgXCJyXCIpXG4gICAgICAgICAgICAgICAgLnRoZW4odmFsdWUgPT4gdmFsdWUuY3JlYXRlUmVhZFN0cmVhbSh7IGVuY29kaW5nOiBcInV0Zi04XCIgfSkucGlwZShyZXNwb25zZSkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiL2xhbWJkYS5jc3NcIjpcbiAgICAgICAgICAgIHJlc3BvbnNlLndyaXRlSGVhZCgyMDAsIHsgXCJDb250ZW50LVR5cGVcIjogXCJ0ZXh0L2NzczsgY2hhcnNldD11dGYtOFwiIH0pXG4gICAgICAgICAgICBvcGVuKGAuJHtyZXF1ZXN0LnVybH1gLCBcInJcIilcbiAgICAgICAgICAgICAgICAudGhlbih2YWx1ZSA9PiB2YWx1ZS5jcmVhdGVSZWFkU3RyZWFtKHsgZW5jb2Rpbmc6IFwidXRmLThcIiB9KS5waXBlKHJlc3BvbnNlKSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXNwb25zZS53cml0ZUhlYWQoNDA0LCB7IFwiQ29udGVudC1UeXBlXCI6IFwidGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOFwiIH0pXG4gICAgICAgICAgICByZXNwb25zZS5lbmQoXCI0MDQ6IE5PVCBGT1VORFwiKVxuICAgIH1cbn0pXG5cbnF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlNldHRpbmcgdXAgYSBzZXJ2ZXIuLi5cIilcbiAgICBzZXJ2ZXIubGlzdGVuKDgwMDApXG4gICAgY29uc29sZS5sb2coXCJTZXJ2ZXIgaXMgcnVubmluZyBvbiBodHRwOi8vbG9jYWxob3N0OjgwMDBcIilcbn0pXG5cbi8vIGRlYnVnZ2VyXG4iXX0=